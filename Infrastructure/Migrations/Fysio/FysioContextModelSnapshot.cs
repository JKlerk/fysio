// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Infrastructure.Migrations.Fysio
{
    [DbContext(typeof(FysioContext))]
    partial class FysioContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Core.Domain.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("TherapistId")
                        .HasColumnType("int");

                    b.Property<int?>("TreatmentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.HasIndex("TherapistId");

                    b.HasIndex("TreatmentId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("Core.Domain.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("Src")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PatientId")
                        .IsUnique();

                    b.ToTable("Images");
                });

            modelBuilder.Entity("Core.Domain.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BigNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatientNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StaffNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Patients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Birthdate = new DateTime(2002, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "kate@test.com",
                            Gender = "Female",
                            Name = "Kate Velasquez",
                            PatientNumber = "24f2f1f7-2e67-43c6-ad96-117b4d6ea413",
                            PhoneNumber = "0612121212",
                            StaffNumber = "2168734"
                        },
                        new
                        {
                            Id = 2,
                            Birthdate = new DateTime(2002, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "emily@test.com",
                            Gender = "Female",
                            Name = "Emily Fariello",
                            PatientNumber = "c92c9203-fbed-416d-82f6-bdbab04d3da9",
                            PhoneNumber = "0612121212",
                            StaffNumber = "2168734"
                        });
                });

            modelBuilder.Entity("Core.Domain.PatientFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DiagnoseCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DischargeDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("InterviewerId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int?>("PractitionerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("SupervisorId")
                        .HasColumnType("int");

                    b.Property<string>("TherapistType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("InterviewerId");

                    b.HasIndex("PatientId")
                        .IsUnique();

                    b.HasIndex("PractitionerId");

                    b.HasIndex("SupervisorId");

                    b.ToTable("PatientsFile");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Age = 18,
                            Description = "Big description",
                            DiagnoseCode = "BCH-1000",
                            DischargeDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InterviewerId = 1,
                            Notes = "Lorem ipsum dolor sit amet consectetur adipisicing elit. Qui molestiae unde voluptates aperiam quas quaerat minus perferendis tenetur fuga provident, nemo abexplicabo vitae at numquam quo. Dolorum, enim saepe.",
                            PatientId = 1,
                            PractitionerId = 1,
                            RegisterDate = new DateTime(2002, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SupervisorId = 1,
                            TherapistType = "Student"
                        },
                        new
                        {
                            Id = 2,
                            Age = 18,
                            Description = "Big description",
                            DiagnoseCode = "BCH-1000",
                            DischargeDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InterviewerId = 1,
                            Notes = "Lorem ipsum dolor sit amet consectetur adipisicing elit. Qui molestiae unde voluptates aperiam quas quaerat minus perferendis tenetur fuga provident, nemo abexplicabo vitae at numquam quo. Dolorum, enim saepe.",
                            PatientId = 2,
                            PractitionerId = 1,
                            RegisterDate = new DateTime(2002, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SupervisorId = 1,
                            TherapistType = "Student"
                        });
                });

            modelBuilder.Entity("Core.Domain.Therapist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AvailableDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BigNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("StudentNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Therapists");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AvailableDate = "01/09/2002 00:00:00",
                            BigNumber = "12345678901",
                            Email = "p.stoop@avans.nl",
                            Name = "Pascal Stoop",
                            PhoneNumber = "0612121212",
                            RoleId = 0,
                            StudentNumber = "null"
                        },
                        new
                        {
                            Id = 2,
                            AvailableDate = "01/09/2002 00:00:00",
                            BigNumber = "12345678901",
                            Email = "a.biyikli@avans.nl",
                            Name = "Ali Biyikli",
                            PhoneNumber = "0612121212",
                            RoleId = 0,
                            StudentNumber = "null"
                        });
                });

            modelBuilder.Entity("Core.Domain.Treatment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FinishDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TherapistId")
                        .HasColumnType("int");

                    b.Property<int>("TreatmentPlanId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TherapistId");

                    b.HasIndex("TreatmentPlanId");

                    b.ToTable("Treatments");
                });

            modelBuilder.Entity("Core.Domain.TreatmentPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("MaxTreatments")
                        .HasColumnType("int");

                    b.Property<int>("PatientFileId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PatientFileId")
                        .IsUnique();

                    b.ToTable("TreatmentPlans");
                });

            modelBuilder.Entity("Core.Domain.Appointment", b =>
                {
                    b.HasOne("Core.Domain.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.Therapist", "Therapist")
                        .WithMany("Appointments")
                        .HasForeignKey("TherapistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.Treatment", "Treatment")
                        .WithMany()
                        .HasForeignKey("TreatmentId");

                    b.Navigation("Patient");

                    b.Navigation("Therapist");

                    b.Navigation("Treatment");
                });

            modelBuilder.Entity("Core.Domain.Image", b =>
                {
                    b.HasOne("Core.Domain.Patient", "Patient")
                        .WithOne("Image")
                        .HasForeignKey("Core.Domain.Image", "PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Core.Domain.PatientFile", b =>
                {
                    b.HasOne("Core.Domain.Therapist", "Interviewer")
                        .WithMany()
                        .HasForeignKey("InterviewerId");

                    b.HasOne("Core.Domain.Patient", "Patient")
                        .WithOne("PatientFile")
                        .HasForeignKey("Core.Domain.PatientFile", "PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.Therapist", "Practitioner")
                        .WithMany()
                        .HasForeignKey("PractitionerId");

                    b.HasOne("Core.Domain.Therapist", "Supervisor")
                        .WithMany()
                        .HasForeignKey("SupervisorId");

                    b.Navigation("Interviewer");

                    b.Navigation("Patient");

                    b.Navigation("Practitioner");

                    b.Navigation("Supervisor");
                });

            modelBuilder.Entity("Core.Domain.Treatment", b =>
                {
                    b.HasOne("Core.Domain.Therapist", "Therapist")
                        .WithMany()
                        .HasForeignKey("TherapistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.TreatmentPlan", "TreatmentPlan")
                        .WithMany("Treatments")
                        .HasForeignKey("TreatmentPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Therapist");

                    b.Navigation("TreatmentPlan");
                });

            modelBuilder.Entity("Core.Domain.TreatmentPlan", b =>
                {
                    b.HasOne("Core.Domain.PatientFile", "PatientFile")
                        .WithOne("TreatmentPlan")
                        .HasForeignKey("Core.Domain.TreatmentPlan", "PatientFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PatientFile");
                });

            modelBuilder.Entity("Core.Domain.Patient", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Image");

                    b.Navigation("PatientFile");
                });

            modelBuilder.Entity("Core.Domain.PatientFile", b =>
                {
                    b.Navigation("TreatmentPlan");
                });

            modelBuilder.Entity("Core.Domain.Therapist", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("Core.Domain.TreatmentPlan", b =>
                {
                    b.Navigation("Treatments");
                });
#pragma warning restore 612, 618
        }
    }
}
